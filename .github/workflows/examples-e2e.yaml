name: Run headless tests on root example apps

on:
  workflow_call:
  workflow_dispatch:
  push:
    paths:
      - "examples/**"
    branches:
      - main
      - release
  pull_request:
  # pull_request:
  #   paths:
  #     - "examples/**"

env:
  WASP_TELEMETRY_DISABLE: 1

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup-and-cache-playwright:
    name: Setup and Cache Playwright
    runs-on: ubuntu-22.04
    outputs:
      playwright-version: ${{ steps.get-playwright-version.outputs.version }}
    steps:
      - uses: "actions/checkout@v4"
        with:
          # Workaround for a Github Checkout action bug
          # https://github.com/actions/checkout/issues/1359#issuecomment-1567902034
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Get Playwright Version from Waspello Example App
        id: get-playwright-version
        working-directory: examples/waspello
        run: |
          PLAYWRIGHT_VERSION=$(jq -r '.devDependencies["@playwright/test"]' package.json)
          echo "Playwright's Version: $PLAYWRIGHT_VERSION"
          echo "version=$PLAYWRIGHT_VERSION" >> $GITHUB_OUTPUT

      - name: Cache Playwright Browsers for Playwright's Version
        id: cache-playwright-browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ steps.get-playwright-version.outputs.version }}
          lookup-only: true

      - name: Setup Playwright
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: |
          npx playwright install --with-deps

  setup-and-cache-wasp:
    name: Setup and Cache Wasp CLI
    runs-on: ubuntu-22.04
    outputs:
      wasp-cache-key: ${{ steps.cache-wasp-artifacts.outputs.cache-primary-key }}
    steps:
      - uses: "actions/checkout@v4"
        with:
          # Workaround for a Github Checkout action bug
          # https://github.com/actions/checkout/issues/1359#issuecomment-1567902034
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: ./.github/actions/setup-haskell

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Cache Wasp CLI Artifacts
        id: cache-wasp-artifacts
        uses: actions/cache@v4
        with:
          path: waspc/artifacts
          key: wasp-cli-${{ runner.os }}-${{ hashFiles('waspc/**/*.hs', 'waspc/**/*.cabal', 'waspc/cabal.project') }}
          lookup-only: true

      - name: Build and package
        if: steps.cache-wasp-artifacts.outputs.cache-hit != 'true'
        working-directory: waspc
        run: |
          ./run build:all
          mkdir -p artifacts
          ./tools/make_binary_package.sh "artifacts/wasp.tar.gz"

  test-example-apps:
    name: Test Example Apps
    runs-on: ubuntu-22.04
    needs: [setup-and-cache-playwright, setup-and-cache-wasp]

    strategy:
      fail-fast: false
      matrix:
        example:
          - tutorials/TodoApp
          - tutorials/TodoAppTs
          - waspello
          - waspleau
          - websockets-realtime-voting

    steps:
      - uses: "actions/checkout@v4"
        with:
          # Workaround for a Github Checkout action bug
          # https://github.com/actions/checkout/issues/1359#issuecomment-1567902034
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Restore Playwright Browsers Cache
        uses: actions/cache/restore@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ needs.setup-and-cache-playwright.outputs.playwright-version }}

      - name: Restore Wasp CLI Artifacts
        uses: actions/cache/restore@v4
        with:
          path: waspc/artifacts
          key: ${{ needs.setup-and-cache-wasp.outputs.wasp-cache-key }}

      - name: Setup Wasp CLI
        run: |
          cd waspc/artifacts
          tar -xzf wasp.tar.gz
          chmod +x wasp-bin
          ln -s wasp-bin wasp-cli
          echo "$PWD" >> $GITHUB_PATH

      - name: Set up Wasp App runner
        run: npm i -g @wasp.sh/wasp-app-runner

      - name: Install Dependencies for ${{ matrix.example }}
        working-directory: examples/${{ matrix.example }}
        run: |
          npm ci

      - name: Run Headless DEV Tests for ${{ matrix.example }}
        working-directory: examples/${{ matrix.example }}/headless-tests
        env:
          WASP_CLI_CMD: wasp-cli
          HEADLESS_TEST_MODE: dev
          # Useful for debugging when the playwright webserver fails.
          DEBUG: pw:webserver
        run: |
          npx playwright test

      - name: Run Headless BUILD Tests for ${{ matrix.example }}
        working-directory: examples/${{ matrix.example }}/headless-tests
        env:
          WASP_CLI_CMD: wasp-cli
          HEADLESS_TEST_MODE: build
          # Useful for debugging when the playwright webserver fails.
          DEBUG: pw:webserver
        run: |
          npx playwright test
