name: WASPC-CI

on:
  workflow_dispatch:
  push:
    paths:
      - "waspc/**"
    branches:
      - main
      - release
  pull_request:
    paths:
      - "waspc/**"
  create: { tags: [v*] }
  schedule:
    # Additionally run once per week (At 00:00 on Sunday) to avoid loosing cache
    # (GH deletes it after 7 days of not using it).
    - cron: "0 0 * * 0"

env:
  WASP_TELEMETRY_DISABLE: 1

defaults:
  run:
    shell: bash
    working-directory: waspc

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Wasp
    runs-on: ${{ matrix.os.runner }}
    container: ${{ matrix.os.container }}
    strategy:
      matrix:
        os:
          # We set the Ubuntu version to the oldest supported LTS version
          # rather than the latest LTS version. Doing so avoids GLIBC version
          # mismatch errors (and possibly other similar issues).
          #
          # This might become redundant if we start building with Alpine/Musl
          # and link the binaries statically:
          # https://github.com/wasp-lang/wasp/issues/650#issuecomment-1180488040
          - runner: ubuntu-latest
            container: haskell:bullseye
          # - runner: macos-latest
          # - runner: windows-latest
        node-version:
          - "latest"
        ghc:
          - "8.10.7"
        cabal:
          - "3.6.2.0"
        # In addition to the default matrix, we also want to run the build job for
        # additional Node.js versions, to make sure that Wasp works with them.
        # To reduce the number of jobs, we only test the Node.js versions on
        # Ubuntu 20.04.
        # include:
        #   - os:
        #       runner: ubuntu-22.04
        #     node-version: 20
        #     ghc: "8.10.7"
        #     cabal: "3.6.2.0"
        #   - os:
        #       runner: ubuntu-22.04
        #     node-version: 22
        #     ghc: "8.10.7"
        #     cabal: "3.6.2.0"

    steps:
      - name: Install build dependencies
        if: contains(matrix.os.runner, 'ubuntu')
        working-directory: /
        run: |
          apt-get update
          apt-get install -y build-essential git sudo curl libgmp-dev zlib1g-dev
      - name: Configure git
        working-directory: ~
        # For waspc parser tests, we need to make sure git doesn't convert line
        # endings to CRLF during checkout on Windows because that would cause
        # the test cases to fail.
        run: |
          git config --global core.autocrlf input
          git config --global core.eol lf

      - uses: "actions/checkout@v4"
        with:
          # Workaround for a Github Checkout action bug
          # https://github.com/actions/checkout/issues/1359#issuecomment-1567902034
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Haskell
        id: setup-haskell-cabal
        uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}

      - name: Verify Haskell setup
        run: |
          ghc --version
          cabal --version

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
          # TODO: Right now, actions/cache updates cache only if cache was not fe
          #   This is not ideal for us, because we would ideally update cache even if it
          #   was fetched, because we want to cache any newly installed packages.
          #   This was working normally on Travis and Appveyor.
          #   There is an issue for this, and for now we are using proposed "fix" from it,
          #   https://github.com/actions/cache/issues/342#issuecomment-673371329,
          #   which mitigates the problem by creating new cache for each job and then using
          #   the feature of restore-keys which makes sure that next cache picked is the
          #   latest one. However, this keeps creating new cache each time which is not
          #   ideal because caches keep getting evicted, so for example if Win job
          #   fails multiple times while others don't, its cache will likely get evicted,
          #   making it even slower to test and fix (uffff).
          #   When they fix this, we should remove ${{ github.run_id }} from the end of the key.
          key: wasp-build-${{ matrix.os.runner }}-${{ matrix.os.container }}-${{ matrix.ghc }}-${{ hashFiles('waspc/waspc.cabal') }}-${{ hashFiles('waspc/cabal.project') }}-${{ github.run_id }}
          restore-keys: wasp-build-${{ matrix.os.runner }}-${{ matrix.os.container }}-${{ matrix.ghc }}-

      - name: Check Haskell code formatting
        if: matrix.os.runner == 'ubuntu-latest'
        run: ./run ormolu:check

      - name: packages/ts-inspect - Run tests
        if: matrix.os.runner == 'ubuntu-latest' || matrix.os.runner == 'macos-latest'
        run: |
          cd packages/ts-inspect
          npm ci
          npm test

      - name: Compile TS packages and move it into the Cabal data dir
        if: matrix.os.runner == 'ubuntu-latest' || matrix.os.runner == 'macos-latest'
        run: ./tools/install_packages_to_data_dir.sh

      - name: Build external dependencies
        run: cabal build --enable-tests --enable-benchmarks --only-dependencies

      - name: Build wasp code
        run: cabal build all

      - name: On MacOS, skip e2e tests with Docker since it is not installed
        if: matrix.os.runner == 'macos-latest'
        run: export WASP_E2E_TESTS_SKIP_DOCKER=1

      - name: Run unit tests
        run: cabal test cli-test waspc-test waspls-test

      - name: Ensure examples/todoApp compiles and builds
        if: matrix.os.runner == 'ubuntu-latest' || matrix.os.runner == 'macos-latest'
        run: ./examples/todoApp/ensure_app_compiles_and_builds.sh

      - name: Run e2e tests
        run: cabal test e2e-test

      - name: Create binary package (Unix)
        run: |
          OS_NAME=`case "${{ runner.os }}" in Linux) echo "linux";; macOS) echo "macos";; *) exit 1;; esac`
          mkdir artifacts
          ./tools/make_binary_package.sh "artifacts/wasp-$OS_NAME-x86_64.tar.gz"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasp-binary
          path: "waspc/artifacts/*"

      - name: Create Github release
        uses: ncipollo/release-action@v1
        if: startsWith(github.ref, 'refs/tags/v') && (matrix.os.runner == 'ubuntu-latest' || matrix.os.runner == 'macos-latest') && matrix.node-version == 'latest'
        with:
          draft: true
          allowUpdates: true
          artifacts: "waspc/artifacts/*"
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
