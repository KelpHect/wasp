name: Test Wasp Deploy

on:
  workflow_call:
    secrets:
      FLY_API_TOKEN:
        description: "Fly API token for deploying apps"
        required: true

jobs:
  echo_steps:
    runs-on: ubuntu-latest
    env:
      # TODO: When exactly does this get passed in automatically? I'm guessing whenever the workflow is called on its own (and not as a reusable workflow).
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      FLY_REGION: mia
      
    steps:

      # - name: Install Wasp
      #   # TODO: I should use the currently built version, check with Franjo and Carlos.
      #   # This will do for now.
      #   run: |
      #     curl -sSfL https://get.wasp.sh/installer.sh | sh -s

      - name: Install Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@v1

      - name: Generate unique prefix
        id: generate_prefix
        run: echo "APP_PREFIX=ci-$(echo $GITHUB_SHA | head -c 7)" >> $GITHUB_ENV

      - name: Secret sanity check
        run: echo "Passed in secret -> $FLY_API_TOKEN"
      #
      # - name: Checkout repo
      #   uses: actions/checkout@v4
      #
      # - name: Prepare Server Secrets
      #   id: prepare_secrets
      #   working-directory: waspc/examples/todoApp
      #   run: |
      #     echo "ENV_VARS=$(cat .env.server.headless | sed -E 's/#.*//' | awk 'NF {$1=$1;print}' | sed -E 's/^/--server-secret /' | paste -sd' ')" >> $GITHUB_ENV
      #
      # - name: Deploy Kitchen sink app
      #   working-directory: waspc/examples/todoApp
      #   # FIXME: Don't run this before sorting out the secret situation - it will output secrets (DB connection string).
      #   # Same problem with setting env var
      #   run: |
      #     echo "Running wasp deploy fly launch $APP_PREFIX $FLY_REGION --org wasp ${{ env.ENV_VARS }}"
      #     echo "Fly token: ${{ secrets.FLY_API_TOKEN }}, $FLY_API_TOKEN"
      #     yes | wasp deploy fly launch $APP_PREFIX $FLY_REGION --org wasp ${{ env.ENV_VARS }}

      - name: Echo Testing
        run: echo "Testing"

      - name: Destroy Apps
        run: |
          echo "prefix is $APP_PREFIX"
          flyctl apps list -q
          flyctl apps list -q | grep "$APP_PREFIX"
          # flyctl apps list -q | grep $APP_PREFIX | xargs echo fly apps destroy -y
          echo "dobri smo"
