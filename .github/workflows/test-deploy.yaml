name: Test Wasp Deploy

on:
  workflow_call:
    secrets:
      FLY_API_TOKEN:
        description: "Fly API token for deploying apps"
        required: true

jobs:
  echo_steps:
    runs-on: ubuntu-latest
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      FLY_REGION: mia

    steps:
      # - name: Install Wasp
      #   # TODO: I should use the currently built version, check with Franjo and Carlos.
      #   # This will do for now.
      #   run: |
      #     curl -sSfL https://get.wasp.sh/installer.sh | sh -s

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Haskell
        uses: ./.github/actions/setup-haskell

      - name: Set up Node
        uses: actions/setup-node@v4

      - name: Install Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@v1

      - name: Generate unique prefix based on commit
        id: generate_prefix
        run: echo "APP_PREFIX=ci-$(echo $GITHUB_SHA | head -c 7)" >> $GITHUB_ENV

      - name: Prepare Server Secrets
        id: prepare_secrets
        working-directory: waspc/examples/todoApp
        run: |
          # TODO: Explain the assumptinos and the fragility of this
          echo "ENV_VARS=$(cat .env.server.headless | sed -E 's/#.*//' | awk 'NF {$1=$1;print}' | sed -E 's/^/--server-secret /' | paste -sd' ')" >> $GITHUB_ENV

      - name: Deploy Kitchen sink app
        working-directory: waspc/examples/todoApp
        # NOTE: Github knows not to output the db connection string, how?
        run: |
          yes | ../../run wasp-cli deploy fly launch $APP_PREFIX $FLY_REGION --org wasp ${{ env.ENV_VARS }}

      - name: Save deployed app info
        working-directory: waspc/examples/todoApp
        run: |
          get_hostname () { 
            local config_file="$1"
            flyctl status -j -c "$config_file" | jq -r '.Hostname'
          }

          echo "SERVER_HOSTNAME=$(get_hostname fly-server.toml)" >> $GITHUB_ENV
          echo "CLIENT_HOSTNAME=$(get_hostname fly-client.toml)" >> $GITHUB_ENV

      - name: Verify app is functional
        run: |
          echo "Testing the app"
          curl -X POST https://$SERVER_HOSTNAME/operations/get-date
          curl https://$CLIENT_HOSTNAME

      - name: Clean up testing app
        run: |
          flyctl apps list -q | grep "$APP_PREFIX" | xargs flyctl apps destroy -y
