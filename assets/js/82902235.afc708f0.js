"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[65122],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=p(a),u=i,h=d["".concat(l,".").concat(u)]||d[u]||c[u]||r;return a?n.createElement(h,s(s({ref:t},m),{},{components:a})):n.createElement(h,s({ref:t},m))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,s=new Array(r);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},38610:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(67294),i=a(44996);const r=e=>n.createElement("div",null,n.createElement("p",{align:"center"},n.createElement("figure",null,n.createElement("img",{style:{width:e.width},alt:e.alt,src:(0,i.Z)(e.source)}),n.createElement("figcaption",{class:"image-caption",style:{fontStyle:"italic",opacity:.6,fontSize:"0.9rem"}},e.caption))))},46300:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(67294),i=a(50012);function r(e){let{path:t}=e;const[a]=(0,i.Nk)("docusaurus.tab.js-ts"),r=t.lastIndexOf("{"),s=t.slice(r+1,t.length-1),[o,l]=s.split(","),p=t.slice(0,r);return n.createElement("code",null,p+("js"===a?o:l))}},97897:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>m});var n=a(87462),i=(a(67294),a(3905)),r=(a(46300),a(38610));const s={title:"Prisma Schema File"},o=void 0,l={unversionedId:"data-model/prisma-file",id:"version-0.15.0/data-model/prisma-file",title:"Prisma Schema File",description:'Wasp uses Prisma to interact with the database. Prisma is a "Next-generation Node.js and TypeScript ORM" that provides a type-safe API for working with your database.',source:"@site/versioned_docs/version-0.15.0/data-model/prisma-file.md",sourceDirName:"data-model",slug:"/data-model/prisma-file",permalink:"/docs/0.15.0/data-model/prisma-file",draft:!1,editUrl:"https://github.com/wasp-lang/wasp/edit/release/web/versioned_docs/version-0.15.0/data-model/prisma-file.md",tags:[],version:"0.15.0",frontMatter:{title:"Prisma Schema File"},sidebar:"docs",previous:{title:"Databases",permalink:"/docs/0.15.0/data-model/backends"},next:{title:"Overview",permalink:"/docs/0.15.0/auth/overview"}},p={},m=[{value:"Wasp file and Prisma schema file",id:"wasp-file-and-prisma-schema-file",level:2},{value:"Wasp-specific Prisma configuration",id:"wasp-specific-prisma-configuration",level:2},{value:"The <code>datasource</code> block",id:"the-datasource-block",level:3},{value:"The <code>generator</code> blocks",id:"the-generator-blocks",level:3},{value:"The <code>model</code> blocks",id:"the-model-blocks",level:3},{value:"Prisma preview features",id:"prisma-preview-features",level:2}],d={toc:m},c="wrapper";function u(e){let{components:t,...a}=e;return(0,i.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Wasp uses ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/"},"Prisma"),' to interact with the database. Prisma is a "Next-generation Node.js and TypeScript ORM" that provides a type-safe API for working with your database.'),(0,i.kt)("p",null,"With Prisma, you define your application's data model in a ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.prisma")," file. Read more about how Wasp Entities relate to Prisma models on the ",(0,i.kt)("a",{parentName:"p",href:"/docs/0.15.0/data-model/entities"},"Entities")," page."),(0,i.kt)("p",null,"In Wasp, the ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.prisma")," file is located in your project's root directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},".\n\u251c\u2500\u2500 main.wasp\n...\n// highlight-next-line\n\u251c\u2500\u2500 schema.prisma\n\u251c\u2500\u2500 src\n\u251c\u2500\u2500 tsconfig.json\n\u2514\u2500\u2500 vite.config.ts\n")),(0,i.kt)("p",null,"Wasp uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.prisma")," file to understand your app's data model and generate the necessary code to interact with the database."),(0,i.kt)("h2",{id:"wasp-file-and-prisma-schema-file"},"Wasp file and Prisma schema file"),(0,i.kt)("p",null,"Let's see how Wasp and Prisma files work together to define your application."),(0,i.kt)("p",null,"Here's an example ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.prisma")," file where we defined some database options and two models (User and Task) with a one-to-many relationship:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-prisma",metastring:'title="schema.prisma"',title:'"schema.prisma"'},'datasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n\ngenerator client {\n  provider = "prisma-client-js"\n}\n\nmodel User {\n  id      Int        @id @default(autoincrement())\n  tasks   Task[]\n}\n\nmodel Task {\n  id          Int        @id @default(autoincrement())\n  description String\n  isDone      Boolean    @default(false)\n  user        User       @relation(fields: [userId], references: [id])\n  userId      Int\n}\n')),(0,i.kt)("p",null,"Wasp reads this ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.prisma")," file and extracts the info about your database models and database config."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"datasource")," block defines which database you want to use (PostgreSQL in this case) and some other options."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"generator")," block defines how to generate the Prisma Client code that you can use in your application to interact with the database."),(0,i.kt)(r.Z,{alt:"Relationship between Wasp file and Prisma file",source:"img/data-model/prisma_in_wasp.png",caption:"Relationship between Wasp file and Prisma file",mdxType:"ImgWithCaption"}),(0,i.kt)("p",null,"Finally, Prisma models become Wasp Entities which can be then used in the ",(0,i.kt)("inlineCode",{parentName:"p"},"main.wasp")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'app myApp {\n  wasp: {\n    version: "^0.15.0"\n  },\n  title: "My App",\n}\n\n...\n\n// Using Wasp Entities in the Wasp file\n\nquery getTasks {\n  fn: import { getTasks } from "@src/queries",\n  // highlight-next-line\n  entities: [Task]\n}\n\njob myJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from "@src/workers/bar"\n  },\n  // highlight-next-line\n  entities: [Task],\n}\n\napi fooBar {\n  fn: import { fooBar } from "@src/apis",\n  // highlight-next-line\n  entities: [Task],\n  httpRoute: (GET, "/foo/bar/:email")\n}\n\n')),(0,i.kt)("p",null,"In the implementation of the ",(0,i.kt)("inlineCode",{parentName:"p"},"getTasks")," query, ",(0,i.kt)("inlineCode",{parentName:"p"},"Task")," is a Wasp Entity that corresponds to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Task")," model defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.prisma")," file."),(0,i.kt)("p",null,"The same goes for the ",(0,i.kt)("inlineCode",{parentName:"p"},"myJob")," job and ",(0,i.kt)("inlineCode",{parentName:"p"},"fooBar")," API, where ",(0,i.kt)("inlineCode",{parentName:"p"},"Task")," is used as an Entity."),(0,i.kt)("p",null,"To learn more about the relationship between Wasp Entities and Prisma models, check out the ",(0,i.kt)("a",{parentName:"p",href:"/docs/0.15.0/data-model/entities"},"Entities")," page."),(0,i.kt)("h2",{id:"wasp-specific-prisma-configuration"},"Wasp-specific Prisma configuration"),(0,i.kt)("p",null,"Wasp mostly lets you use the Prisma schema file as you would in any other JS/TS project. However, there are some Wasp-specific rules you need to follow."),(0,i.kt)("h3",{id:"the-datasource-block"},"The ",(0,i.kt)("inlineCode",{parentName:"h3"},"datasource")," block"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-prisma",metastring:'title="schema.prisma"',title:'"schema.prisma"'},'datasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n')),(0,i.kt)("p",null,"Wasp takes the ",(0,i.kt)("inlineCode",{parentName:"p"},"datasource")," you write and use it as-is."),(0,i.kt)("p",null,"There are some rules you need to follow:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You can only use ",(0,i.kt)("inlineCode",{parentName:"li"},'"postgresql"')," or ",(0,i.kt)("inlineCode",{parentName:"li"},'"sqlite"')," as the ",(0,i.kt)("inlineCode",{parentName:"li"},"provider")," because Wasp only supports PostgreSQL and SQLite databases for now."),(0,i.kt)("li",{parentName:"ul"},"You must set the ",(0,i.kt)("inlineCode",{parentName:"li"},"url")," field to ",(0,i.kt)("inlineCode",{parentName:"li"},'env("DATABASE_URL")')," so that Wasp can work properly with your database.")),(0,i.kt)("h3",{id:"the-generator-blocks"},"The ",(0,i.kt)("inlineCode",{parentName:"h3"},"generator")," blocks"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-prisma",metastring:'title="schema.prisma"',title:'"schema.prisma"'},'generator client {\n  provider = "prisma-client-js"\n}\n')),(0,i.kt)("p",null,"Wasp requires that there is a ",(0,i.kt)("inlineCode",{parentName:"p"},"generator")," block with ",(0,i.kt)("inlineCode",{parentName:"p"},'provider = "prisma-client-js"')," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.prisma")," file."),(0,i.kt)("p",null,"You can add additional generators if you need them in your project."),(0,i.kt)("h3",{id:"the-model-blocks"},"The ",(0,i.kt)("inlineCode",{parentName:"h3"},"model")," blocks"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-prisma",metastring:'title="schema.prisma"',title:'"schema.prisma"'},"model User {\n  id      Int        @id @default(autoincrement())\n  tasks   Task[]\n}\n\nmodel Task {\n  id          Int        @id @default(autoincrement())\n  description String\n  isDone      Boolean    @default(false)\n  user        User       @relation(fields: [userId], references: [id])\n  userId      Int\n}\n")),(0,i.kt)("p",null,"You can define your models in any way you like, if it's valid Prisma schema code, it will work with Wasp."),(0,i.kt)("admonition",{title:"Triple slash comments",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Wasp doesn't yet fully support ",(0,i.kt)("inlineCode",{parentName:"p"},"/// comment")," syntax in the ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.prisma")," file. We are tracking it ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/wasp-lang/wasp/issues/2132"},"here"),", let us know if this is something you need.")),(0,i.kt)("h2",{id:"prisma-preview-features"},"Prisma preview features"),(0,i.kt)("p",null,"Prisma is still in active development and some of its features are not yet stable. To enable various preview features in Prisma, you need to add the ",(0,i.kt)("inlineCode",{parentName:"p"},"previewFeatures")," field to the ",(0,i.kt)("inlineCode",{parentName:"p"},"generator")," block in the ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.prisma")," file."),(0,i.kt)("p",null,"For example, one useful Prisma preview feature is PostgreSQL extensions support, which allows you to use PostgreSQL extensions like ",(0,i.kt)("inlineCode",{parentName:"p"},"pg_vector")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"pg_trgm")," in your database schema:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-prisma",metastring:'title="schema.prisma"',title:'"schema.prisma"'},'datasource db {\n  provider   = "postgresql"\n  url        = env("DATABASE_URL")\n  extensions = [pgvector(map: "vector")]\n}\n\ngenerator client {\n  provider        = "prisma-client-js"\n  previewFeatures = ["postgresqlExtensions"]\n}\n\n// ...\n')),(0,i.kt)("p",null,"Read more about preview features in the Prisma docs ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/orm/reference/preview-features/client-preview-features"},"here")," or about using PostgreSQL extensions ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/orm/prisma-schema/postgresql-extensions"},"here"),"."))}u.isMDXComponent=!0}}]);